import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px

st.set_page_config(page_title="CRM –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", layout="wide")
st.markdown("""
    <style>
        .block-container { padding-top: 1rem; }
        .css-1v0mbdj.e1fqkh3o3 { gap: 1rem; }
    </style>
""", unsafe_allow_html=True)

# --- Sidebar Menu ---
menu = st.sidebar.selectbox("üìä –ú–µ–Ω—é", [
    "üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "üë§ –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
    "‚ö° –ü—Ä–æ–≥–Ω–æ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    "üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤",
    "üìÑ PDF-–æ—Ç—á—ë—Ç—ã",
    "üì± Telegram-–±–æ—Ç"
])

# --- Load Data ---
@st.cache_data
def load_data():
    conn = sqlite3.connect("bitrix.db")
    return pd.read_sql("SELECT * FROM deals", conn)

deals = load_data()


if menu == "üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.title("üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")

    # üïí –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    deals['date_create'] = pd.to_datetime(deals['date_create'], errors='coerce').dt.tz_localize(None)
    deals['closedate'] = pd.to_datetime(deals['closedate'], errors='coerce').dt.tz_localize(None)

    valid_dates = deals['date_create'].dropna()
    min_date = valid_dates.min().date()
    max_date = valid_dates.max().date()

    st.markdown("#### üìÜ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç")
    start_date, end_date = st.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    st.caption(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: {min_date} ‚Äî {max_date}")
    st.caption(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} ‚Äî {end_date}")

    # üìã –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    filtered = deals[
        (deals['date_create'] >= pd.to_datetime(start_date)) &
        (deals['date_create'] <= pd.to_datetime(end_date))
    ]
    if filtered.empty:
        filtered = deals.copy()
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    # üìä –ú–µ—Ç—Ä–∏–∫–∏
    total_calls = len(filtered)
    i2crm_chats = filtered['source_id'].str.contains("I2CRM", na=False).sum()
    meetings = filtered['closedate'].notna().sum()
    won_deals = filtered[filtered['stage_id'] == 'WON']

    conversion_rate = round((len(won_deals) / total_calls) * 100, 1) if total_calls else 0
    avg_deal = won_deals['opportunity'].mean() if not won_deals['opportunity'].isna().all() else 0
    time_to_close = (
        won_deals['closedate'] - won_deals['date_create']
    ).dt.days.mean() if not won_deals.empty else 0

    # üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    st.markdown("### üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3 = st.columns(3)
    col1.metric("üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", f"{total_calls:,}", "üîº +301%")
    col2.metric("üí¨ –ß–∞—Ç–æ–≤ (I2CRM)", i2crm_chats)
    col3.metric("üìÖ –í—Å—Ç—Ä–µ—á", meetings)

    col4, col5, col6 = st.columns(3)
    col4.metric("‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conversion_rate} %")
    col5.metric("üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"‚Ç∏ {avg_deal:,.0f}")
    col6.metric("‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è", f"{int(time_to_close)} –¥–Ω–µ–π" if time_to_close else "‚Äî")

    # üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("### üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
    trend = filtered.groupby(filtered['date_create'].dt.date).size().reset_index(name="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    trend['–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ'] = trend['–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'].rolling(window=3).mean()

    fig = px.line(
        trend,
        x='date_create',
        y=['–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ'],
        labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫', 'date_create': '–î–∞—Ç–∞'},
        title="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    fig.update_traces(mode='lines+markers')
    fig.update_layout(legend=dict(orientation="h", y=1.1))
    st.plotly_chart(fig, use_container_width=True)




elif menu == "üë§ –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º":
    st.title("üë§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")

    # üìÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç
    deals['date_create'] = pd.to_datetime(deals['date_create'], errors='coerce').dt.tz_localize(None)
    deals['closedate'] = pd.to_datetime(deals['closedate'], errors='coerce').dt.tz_localize(None)
    deals['assigned_by_id'] = pd.to_numeric(deals['assigned_by_id'], errors='coerce').astype('Int64')

    # üîÅ –°–ª–æ–≤–∞—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ID ‚Üí –ò–º—è –§–∞–º–∏–ª–∏—è
    manager_dict = {
        1: "–î–∏–Ω–∞—Ä–∞ –¢—ã–Ω—ã—à—Ç—ã–∫–æ–≤–∞",
        2: "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",
        3: "–ê–π–∂–∞–Ω –ö—É—Ä–º–∞–Ω–æ–≤–∞",
        4: "–†—É—Å—Ç–µ–º –ê–±–¥—É–ª–ª–∏–Ω"
    }

    selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", list(manager_dict.values()))
    selected_id = [k for k, v in manager_dict.items() if v == selected_name][0]

    df = deals[deals['assigned_by_id'] == selected_id]

    if df.empty:
        st.warning("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        st.stop()

    # üìÜ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    st.markdown("#### üìÜ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º —Å–¥–µ–ª–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    min_date = df['date_create'].min().date()
    max_date = df['date_create'].max().date()
    start_date, end_date = st.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    df_filtered = df[
        (df['date_create'] >= pd.to_datetime(start_date)) &
        (df['date_create'] <= pd.to_datetime(end_date))
    ]

    if df_filtered.empty:
        st.warning("‚ö†Ô∏è –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ —Å–¥–µ–ª–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        df_filtered = df.copy()

    # üìä –ú–µ—Ç—Ä–∏–∫–∏
    calls = len(df_filtered)
    conversion = round((df_filtered['stage_id'] == "WON").sum() / calls * 100, 1) if calls > 0 else 0
    avg_deal = df_filtered['opportunity'].mean() if not df_filtered['opportunity'].isna().all() else 0
    time_to_close = (
        df_filtered[df_filtered['stage_id'] == 'WON']['closedate'] -
        df_filtered[df_filtered['stage_id'] == 'WON']['date_create']
    ).dt.days.mean() if not df_filtered[df_filtered['stage_id'] == 'WON'].empty else 0

    chats = df_filtered['source_id'].str.contains("I2CRM", na=False).sum()
    deals_count = len(df_filtered)

    # üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    st.markdown(f"### üìå –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: **{selected_name}**")
    col1, col2, col3 = st.columns(3)
    col1.metric("üìû –ó–≤–æ–Ω–∫–æ–≤", calls)
    col2.metric("‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conversion}%")
    col3.metric("üí∞ –°—Ä. —á–µ–∫", f"‚Ç∏ {avg_deal:,.0f}")

    chats = df_filtered['source_id'].str.contains("I2CRM", na=False).sum()
    deals_count = len(df_filtered)

    col4, col5, col6 = st.columns(3)
    col4.metric("üì¶ –°–¥–µ–ª–æ–∫", deals_count)
    col5.metric("üí¨ –ß–∞—Ç–æ–≤ (I2CRM)", chats)
    col6.metric("‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è", f"{int(time_to_close)} –¥–Ω–µ–π" if time_to_close else "‚Äî")

    st.markdown("### üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏")

    df_filtered['is_won'] = df_filtered['stage_id'] == 'WON'
    daily_stats = df_filtered.groupby(df_filtered['date_create'].dt.date).agg(
    –≤—Å–µ–≥–æ=('id', 'count'),
    –≤—ã–∏–≥—Ä–∞–Ω–æ=('is_won', 'sum')
    ).reset_index()

    daily_stats['–ö–æ–Ω–≤–µ—Ä—Å–∏—è'] = daily_stats['–≤—ã–∏–≥—Ä–∞–Ω–æ'] / daily_stats['–≤—Å–µ–≥–æ']
    daily_stats['–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ'] = daily_stats['–ö–æ–Ω–≤–µ—Ä—Å–∏—è'].rolling(window=3).mean()

    fig = px.line(
    daily_stats,
    x='date_create',
    y=['–ö–æ–Ω–≤–µ—Ä—Å–∏—è', '–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ'],
    labels={'date_create': '–î–∞—Ç–∞', 'value': '–ü—Ä–æ—Ü–µ–Ω—Ç'},
    title='–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –¥–Ω—è–º'
    )
    fig.update_traces(mode="lines+markers")
    fig.update_layout(yaxis_tickformat=".0%", legend=dict(orientation="h", y=1.1))
    st.plotly_chart(fig, use_container_width=True)

elif menu == "‚ö° –ü—Ä–æ–≥–Ω–æ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
    st.title("‚ö° –ü—Ä–æ–≥–Ω–æ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º")

    # üïí –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    deals['date_create'] = pd.to_datetime(deals['date_create'], errors='coerce').dt.tz_localize(None)
    df = deals.copy()
    df = df.dropna(subset=['date_create'])
    df['date'] = df['date_create'].dt.date

    # üìà –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    stats = df.groupby('date').size().reset_index(name='–°–¥–µ–ª–æ–∫')
    stats['–ü—Ä–æ–≥–Ω–æ–∑'] = stats['–°–¥–µ–ª–æ–∫'].rolling(window=3, min_periods=1).mean()

    # üîç –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    if len(stats) >= 2 and stats['–°–¥–µ–ª–æ–∫'].iloc[-1] < stats['–ü—Ä–æ–≥–Ω–æ–∑'].iloc[-1]:
        st.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–∏–∂–µ –ø—Ä–æ–≥–Ω–æ–∑–∞. –í–æ–∑–º–æ–∂–µ–Ω —Å–ø–∞–¥!")

    # üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = px.line(
        stats,
        x='date',
        y=['–°–¥–µ–ª–æ–∫', '–ü—Ä–æ–≥–Ω–æ–∑'],
        labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'date': '–î–∞—Ç–∞'},
        title="üìä –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        markers=True
    )
    fig.update_traces(mode='lines+markers')
    fig.update_layout(
        legend=dict(orientation="h", y=1.1),
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"
    )
    st.plotly_chart(fig, use_container_width=True)


elif menu == "üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤":
    st.title("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞")

    st.markdown("### üßæ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
    st.markdown("""
    1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ **–∫–ª—é—á –æ—Ç WhatsApp API**  
    2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ **CSV-—Ñ–∞–π–ª —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ `name`, `id`, `phone`)  
    3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ **Webhook CRM** ‚Äî URL, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """)

    with st.form("integration_form"):
        st.markdown("#### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

        w_key = st.text_input("üîë API –∫–ª—é—á WhatsApp", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: sk_whatsapp_abc123...")
        csv_file = st.file_uploader("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", type="csv")
        crm_url = st.text_input("üåê Webhook CRM", placeholder="https://example.com/webhook")

        col1, col2 = st.columns(2)
        with col1:
            save = st.form_submit_button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        with col2:
            clear = st.form_submit_button("‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É")

        if clear:
            st.experimental_rerun()

        if save:
            if not w_key and not csv_file and not crm_url:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ.")
            else:
                st.success("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

                if w_key:
                    st.markdown(f"üîë –í–≤–µ–¥—ë–Ω API –∫–ª—é—á: `{w_key}`")

                if crm_url:
                    st.markdown(f"üåê Webhook URL: `{crm_url}`")

                if csv_file:
                    try:
                        df_csv = pd.read_csv(csv_file)
                        st.markdown("üìÑ **–ó–∞–≥—Ä—É–∂–µ–Ω CSV-—Ñ–∞–π–ª:**")
                        st.dataframe(df_csv.head())
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")


elif menu == "üìÑ PDF-–æ—Ç—á—ë—Ç—ã":
    st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–æ–≤")

    st.markdown("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

    # üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    deals['date_create'] = pd.to_datetime(deals['date_create'], errors='coerce')

    min_date = deals['date_create'].min().date()
    max_date = deals['date_create'].max().date()
    date_range = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", (min_date, max_date), min_value=min_date, max_value=max_date)

    # üë§ –í—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    managers = deals['assigned_by_id'].dropna().unique()
    selected_manager = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", ["–í—Å–µ"] + list(map(str, managers)))

    # üì• –ö–Ω–æ–ø–∫–∞
    if st.button("üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å PDF"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞..."):
            st.success("‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

            # üßæ –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–≤—å—é (–≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF)
            st.markdown("### üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á—ë—Ç–∞:")
            st.markdown(f"""
            - –ü–µ—Ä–∏–æ–¥: **{date_range[0]} ‚Äî {date_range[1]}**
            - –ú–µ–Ω–µ–¥–∂–µ—Ä: **{selected_manager if selected_manager != '–í—Å–µ' else '–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã'}**
            - üìä –ì—Ä–∞—Ñ–∏–∫–∏: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º, –ö–æ–Ω–≤–µ—Ä—Å–∏—è, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            - üìà –¢–∞–±–ª–∏—Ü—ã: –°–¥–µ–ª–∫–∏, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –í—ã–≤–æ–¥—ã
            """)

            # üìé –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PDF-—Ñ–∞–π–ª–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
            st.download_button("üìé –°–∫–∞—á–∞—Ç—å PDF-—Ñ–∞–π–ª", data=b"PDF content here", file_name="crm_report.pdf")


elif menu == "üì± Telegram-–±–æ—Ç":
    st.title("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")

    st.markdown("### ü§ñ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    st.markdown("""
    üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
    - üö® –û –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram
    - ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

    üëâ **–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å**, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∏–∂–µ.  
    –ù–µ –∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π ID? –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ [@userinfobot](https://t.me/userinfobot)
    """)

    with st.form("telegram_form"):
        chat_id = st.text_input("üì± –í–∞—à Telegram ID", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789")

        col1, col2 = st.columns(2)
        with col1:
            connect = st.form_submit_button("‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
        with col2:
            test = st.form_submit_button("üì® –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

        if connect:
            if not chat_id or not chat_id.isdigit():
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
            else:
                st.success(f"‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ID `{chat_id}`")

        if test:
            if not chat_id or not chat_id.isdigit():
                st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
            else:
                st.info(f"üì® (–¢–µ—Å—Ç) –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Telegram ID `{chat_id}` ‚Äî (—ç–º—É–ª—è—Ü–∏—è)")
